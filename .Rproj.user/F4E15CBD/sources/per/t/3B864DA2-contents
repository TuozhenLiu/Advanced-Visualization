# Plotly

## Overview
**Plotly**是一个非常强大的开源交互式可视化框架，它通过构建基于 HTML 的交互式图表来显示信息，可创建各种形式的精美图表。Plotly提供了Python，R，Matlab等多种语言API，因此我们可以很方便地在这些软件中调用Plotly，从而快速实现交互式的可视化绘图。

![](fig/plotly-demo1.png)

![](fig/plotly-demo2.png)

## Plotly Pipeline
使用plotly-R包制作的图形是由JavaScript库[plotly.js](https://github.com/plotly/plotly.js)提供底层支持。plotly-R包中的核心函数是`plot_ly()`，它连接了R与js。我们首先来尝试使用`plot_ly()`探索ggplot2中的diamonds数据集，了解如何使用plotly工作。

### visualization demo
```{r}
# load packages
library(plotly)
library(dplyr)
library(htmlwidgets)
library(htmltools)

# load the diamonds dataset from the ggplot2 package
data(diamonds, package = "ggplot2")
diamonds
```

```{r}
plot_ly(diamonds, x = ~cut)
plot_ly(diamonds, x = ~cut, y = ~clarity)
plot_ly(diamonds, x = ~cut, color = ~clarity, colors = "Accent")
```
### easy to add trace
```{r}
p <- diamonds %>%
  plot_ly(x = ~cut) %>% 
  add_histogram(name = "hist") %>%
  group_by(cut) %>%
  summarise(n = n()) %>%
  add_text(
    text = ~scales::comma(n), y = ~n, 
    textposition = "top middle", 
    cliponaxis = FALSE,
    name = "text"
  ) %>%
  ungroup() %>%
  mutate(avg = mean(n)) %>%
  add_lines(y = ~avg,     
            opacity = 0.8,
            line =list(width=2),
            name = "avg"
  ) 
p
```

### getting raw data

```{r}
p %>% plotly_data()
```

### publishing output

```{r}
saveWidget(p, "p.html", selfcontained = F, libdir = "lib")
```


## Plotly Foundations

正如我们在第2节中所看到的，一个plotly图像由多条trace组成，每种trace对应一个画图类型，例如，点、线、文本和多边形，与R base plot 和 ggplot2类似。这些trace通过`add_trace()`或`add_*()`函数（`add_markers(), add_lines(), add_paths(), add_segments(), add_ribbons(), add_area(), and add_polygons()`等）来创建。

### markers

```{r}
# load the mpg dataset from the ggplot2 package
data(mpg, package = "ggplot2")
mpg
```

#### Alpha
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy)  %>% 
    add_markers(alpha = 0.3)
```

#### Colors

***discrete***
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy) %>%
  add_markers(color = ~factor(cyl))
```

***continuous***
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy) %>%
  add_markers(color = ~cyl) %>% 
    colorbar()
```

***no mapping data values***
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy) %>%
  add_markers(color = I("black"))
```

#### Symbols
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy) %>%
  add_markers(symbol = ~factor(cyl))
```

#### Size
```{r}
plot_ly(mpg, x = ~cty, y = ~hwy, alpha = 0.3)  %>%
  add_markers(size = ~cyl)
```

###  Lines

```{r}
# load the txhousing dataset from the ggplot2 package
data(txhousing, package = "ggplot2")
txhousing
```

#### Linetypes

```{r}
top5 <- txhousing %>%
  group_by(city) %>%
  summarise(avg = mean(sales, na.rm = TRUE)) %>%
  arrange(desc(avg)) %>%
  top_n(5)

tx5 <- semi_join(txhousing, top5, by = "city")

plot_ly(tx5, x = ~date, y = ~median) %>%
  add_lines(linetype = ~city)
```

### Bars & histograms
```{r}
p1 <- plot_ly(diamonds, x = ~price) %>%
  add_histogram()
p2 <- plot_ly(diamonds, x = ~cut) %>%
  add_histogram()
subplot(p1, p2) %>% hide_legend()
```

***Multiple numeric distributions***
```{r}
one_plot <- function(d) {
  plot_ly(d, x = ~price) %>%
    add_histogram() %>%
    add_annotations(
      ~unique(clarity), x = 0.5, y = 1, 
      xref = "paper", yref = "paper", showarrow = FALSE
    )
}

diamonds %>%
  split(.$clarity) %>%
  lapply(one_plot) %>% 
  subplot(nrows = 2, shareX = TRUE, titleX = FALSE) %>%
  hide_legend()
```

***Multiple discrete distributions***
```{r}
plot_ly(diamonds, x = ~cut, color = ~clarity) %>%
  add_histogram()
```

***percent***
```{r}
# number of diamonds by cut and clarity (n)
cc <- count(diamonds, cut, clarity)
# number of diamonds by cut (nn)
cc2 <- left_join(cc, count(cc, cut, wt = n, name = 'nn'))
cc2 %>%
  mutate(prop = n / nn) %>%
  plot_ly(x = ~cut, y = ~prop, color = ~clarity) %>%
  add_bars() %>%
  layout(barmode = "stack")
```

### Boxplots
```{r}
p <- plot_ly(diamonds, y = ~price, color = I("black"), 
             alpha = 0.1, boxpoints = "suspectedoutliers")
p1 <- p %>% add_boxplot(x = "Overall")
p2 <- p %>% add_boxplot(x = ~cut)
subplot(
  p1, p2, shareY = TRUE,
  widths = c(0.2, 0.8), margin = 0
) %>% hide_legend()
```

```{r}
d <- diamonds %>%
  mutate(cc = interaction(clarity, cut))

# interaction levels sorted by median price
lvls <- d %>%
  group_by(cc) %>%
  summarise(m = median(price)) %>%
  arrange(m) %>%
  pull(cc)

plot_ly(d, x = ~price, y = ~factor(cc, lvls)) %>%
  add_boxplot(color = ~clarity) %>%
  layout(yaxis = list(title = ""))
```

## Plotly Advanced

### ggplotly
```{r echo=FALSE}
library(ggthemr)

palette <- c(
  "flat", "flat dark", "dust", "light", "earth",
  "fresh", "chalk", "lilac", "carrot", "pale",
  "copper", "grape", "greyscale", "sky", "solarized", "grass", "sea", "camouflage"
)

get_ggthemr_color <- function(palette = "flat", return_type = "fill"){
  color <- as.vector(ggthemr(palette, set_theme = FALSE)$palette$swatch)
  if (return_type == "values")
    return(color)
  if (return_type == "fill")
    return(scale_fill_manual(values = color))
  if (return_type == "color")
    return(scale_color_manual(values = color))
}
```

```{r}
data("iris")

one_ggplot <- function(i = 1){
  themr <- ggthemr(palette[i], set_theme = FALSE)
  p <- iris %>%
    ggplot(aes(Sepal.Length, fill = Species)) +
    geom_histogram(binwidth = 0.2) +
    get_ggthemr_color(palette = palette[i], return_type = "fill") +
    themr$theme
  return(p)
}

one_ggplot()

one_ggplot() %>%
  ggplotly()
```

### layout
```{r}
title_font <- list(color = "white", size = 26, family = "Microsoft YaHei")
axis_font <- list(color = "white", size = 20, family = "Microsoft YaHei")

plot_ly(mpg, x = ~cty, y = ~hwy) %>%
  add_markers(color = ~factor(cyl)) %>%
  layout(
    title = list(
      text = paste('markers-dark-theme'),
      font = title_font
    ),
    showlegend = TRUE,
    legend = list(font = list(color = 'white')),
    yaxis = list(
      tickmode='array',
      autorange = TRUE,
      showgrid = FALSE,
      title = list(text = 'cty') ,
      showline = TRUE,
      color = 'white',
      font = axis_font,
      nticks = 4
    ),
    xaxis = list(
      showline = TRUE,
      title = list(text = 'hwy'),
      color = 'white',
      font = axis_font
    ),
    paper_bgcolor = "#000000",
    plot_bgcolor = "#000000",
    margin = list(
      t = 90,
      b = 90,
      l = 90,
      r = 90
    )
  )
```

### Javascript
`plotly_hover`, `plotly_click`, `plotly_selected`

```{r}
p <- plot_ly(mtcars, x = ~wt, y = ~mpg) %>%
  add_markers(
    text = rownames(mtcars),
    customdata = paste0("https://www.bing.com/search?q=", rownames(mtcars))
  )
  
onRender(
  p, "
  function(el) {
    el.on('plotly_click', function(d) {
      var url = d.points[0].customdata;
      window.open(url);
    });
  }
")

```
