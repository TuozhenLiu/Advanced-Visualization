[["index.html", "高级统计绘图 Chapter 1 Introduction", " 高级统计绘图 刘拓臻, 郑恩昱, 戴玥琨 2021-12-21 Chapter 1 Introduction "],["ggplot2.html", "Chapter 2 ggplot2 2.1 散点图 2.2 条形图和箱线图 2.3 直方图和密度曲线图 2.4 时间序列图 2.5 图形标注", " Chapter 2 ggplot2 一般基础的画图R有自己的基础图形系统，例如graphics包，grid包等。或者lattice包。不过这里要介绍的ggplot2它是一个有着完整的一套图形语法所支持的软件包，其语法基于《Grammar of Graphics》（Wilkinson，2005）一书。该绘图包的特点在于并不去定义具体的图形（如直方图，散点图），而是定义各种底层组件（如线条、方块）来合成复杂的图形，这使它能以非常简洁的函数构建各类图形，而且默认条件下的绘图品质就能达到出版要求。 首先在ggplot2的语法中，有几个概念需要了解： 图层（Layer）：图层允许用户一步步的构建图形，方便单独对图层进行修改、增加、甚至改动数据。 标度（Scale）：标度是一种函数，它控制了数学空间到图形元素空间的映射。一组连续数据可以映射到X轴坐标，也可以映射到一组连续的渐变色彩。一组分类数据可以映射成为不同的形状，也可以映射成为不同的大小。 坐标系统（Coordinate）：坐标轴可以进行变换以满足不同的需要，除直角坐标外还有对数坐标、极坐标等。 位面（Facet）：很多时候需要将数据按某种方法分组，分别进行绘图。位面就是控制分组绘图的方法和排列形式。 2.1 散点图 一般对于一系列观测值的图形描述，可以用散点图来直观表达。这里基本的散点图绘制可以使用qplot()函数。下面我们用ggplot2包中关于50000颗钻石的数据集diamonds来进行说明。 library(ggplot2) qplot(carat,price,data=diamonds) 上图表示了钻石价格和重量的关系的散点图，因为有50000个数据，很多点都会重合在一起。在此基础上，可以添加对用颜色对钻石颜色和用不同的形状切工的信息进行区分： qplot(carat,price,data=diamonds,colour=color) qplot(carat,price,data=diamonds,shape=cut) 当然还可以通过透明度的修改，来对重叠的部分进行一些区分。在qplot()中只需添加选项alpha=I(1/n)，其中n代表了该点经过多少次重合后会变得不再透明： qplot(carat,price,data=diamonds,alpha= I(1/50)) 对于密集散点，使用这种方法，就可以很容易的看出大部分点在哪里重叠，这种方式在散点图上点比较多的时候分辨重叠的点的时候有很好的帮助。 或者使用ggplot()函数中的二维直方图来表现： p &lt;- ggplot(diamonds, aes(carat, price)) p + stat_bin2d(bins = 100) 上图中，颜色的深浅代表了该部分大约有多少点重合。里面的bins选项值的大小决定了分块区域的大小。 除此之外，如果还需要对上述钻石数据按照颜色(color)或者切工(cut)在散点图如上加以区分的话，则需要用到ggplot()函数： p &lt;- ggplot(diamonds, aes(carat, price)) p + geom_point(aes(colour = cut,shape = cut, size = depth), alpha = 0.6, position = &#39;jitter&#39;) 为了展示数据的趋势，一般需要在散点图上面添加一条平滑的曲线。这里可以通过添加smooth对象传递给geom参数，它会将这些图按照顺序进行重叠： qplot(carat,price,data=diamonds,geom=c(&quot;point&quot;,&quot;smooth&quot;)) 另外还可以使用更全面的ggplot()函数加上geom_point()、geom_smooth()来实现上面的结果并作出更多诠释。例如想要在上面平滑的基础上分别对不同切工进行平滑并用颜色加以区分： p &lt;- ggplot(diamonds, aes(carat, price,colour=cut)) p + geom_point(alpha=0.1) + geom_smooth() 2.2 条形图和箱线图 对于离散型变量，频数一般可以使用条形图来绘制，并且不需要像基础图形下面使用barchart先对数据进行汇总。这里直接使用geom=“bar”即可，并且如果需要对数据分组，可以使用wight来表达： qplot(color,data=diamonds,geom=&quot;bar&quot;) qplot(color,data=diamonds,geom=&quot;bar&quot;,weight=carat)+scale_y_continuous(&quot;carat&quot;) 此外，还可以对条形图分组并绘制不同类型的条形图。一般调整的参数有stack、dodge、fill、identity，stack方式是将不同年份数据堆叠放置；dodge方式是将不同年份的数据并列放置；fill方式和stack类似，但Y轴不再是计数，而是以百分比显示；identity方式是不做任何改变直接显示出来，所以需要设置透明度才能看得清楚,默认是stack： p &lt;- ggplot(data=diamonds,aes(x=color,fill=factor(cut))) p + geom_bar(position=&#39;stack&#39;) p + geom_bar(position=&#39;dodge&#39;) p + geom_bar(position=&#39;fill&#39;) p + geom_bar(position=&#39;identity&#39;,alpha=0.3) 如果需要使用箱线图来描述连续变量在不同类别下面的变化情况可以使用箱线图来描述，参数为：geom=“boxplot”。例如研究不同颜色下每克拉钻石价格的分布情况: qplot(color,price/carat,data=diamonds,geom=&quot;boxplot&quot;) 又或者，使用ggplot()函数来进行绘制，还可以变成小提琴样式的箱线图。其中geom_violin()绘制小提琴图，geom_jitter()绘制扰动点图： p &lt;- ggplot(diamonds,aes(color,price/carat,fill=color)) p + geom_boxplot() p + geom_violin(alpha=0.8,width=0.9) + geom_jitter(shape= 21, alpha = 0.03) 2.3 直方图和密度曲线图 一般对于连续性数据我们会只用直方图或者密度曲线图来绘制。这里只需在qplot()上面添加参数geom=“histogram”和geom=“density”。来进行实现。其中，直方图的组距使用binwidth参数来进行调整，密度曲线的平滑程度则使用adjust参数来进行设定： qplot(carat,data=diamonds,geom=&quot;histogram&quot;,binwidth=1) qplot(carat,data=diamonds,geom=&quot;histogram&quot;,binwidth=0.1) qplot(carat,data=diamonds,geom=&quot;histogram&quot;,binwidth=0.01) 此外，还可以使用fill或colour参数指定分类的变量从而实现在同一图上使用不同颜色来标识不用种类的信息： qplot(carat,data=diamonds,geom=&quot;histogram&quot;,fill=cut) qplot(carat,data=diamonds,geom=&quot;density&quot;,colour=cut) 对于直方图和密度曲线图，还可以用ggplot()函数来绘制。也可以把上面两这个图合并在一起，以及加上更为复杂的参数： p &lt;- ggplot(diamonds, aes(carat)) p + geom_histogram(position = &#39;identity&#39;,alpha=0.3,aes(y = ..density..,fill = cut),color=&quot;white&quot;) + stat_density(geom = &#39;line&#39;, position = &#39;identity&#39;, aes(colour = cut)) 2.4 时间序列图 对于时间序列数据绘图，其实就是绘制线条图，只需要添加参数geom=“line”即可。例如使用economics数据集绘制一个关于失业率的时间序列图： qplot(date,uempmed,data=economics,geom=&quot;line&quot;) 2.5 图形标注 在绘图步骤完成之后，一般还需要加上额外的文字和图形来标注。例如对于前面的失业率时间序列上加上每任美国总统就职的时间点： (unemp &lt;- qplot(date, uempmed, data=economics, geom=&quot;line&quot;)) presidential &lt;- presidential[-(1:3),] unemp + geom_vline(aes(xintercept = as.numeric(start)), data = presidential) 或者这种标识比较单调，我们也可以用对不同总统任期的区域背景着色来进行区分： library(scales) xr &lt;- range(economics$date) yr &lt;- range(economics$uempmed) unemp + geom_rect(aes(NULL,NULL,xmin=start,xmax=end,fill=name),ymin=yr[1],ymax=yr[2],data=presidential,alpha=0.2) 常用的基础绘图函数和ggplot2中图层的对照如下： 基础绘图函数 ggplot2中的图层 curve() geom_curve() hline() geom_hline() lines() geom_line() points() geom_point() polygon() geom_polygon() rect() geom_rect() rug() geom_rug() segments() geom_segment() text() geom_text() vline() geom_vline() abline(lm(y~x)) geom_smooth(method=“lm”) lines(density(x)) geom_density() lines(loess(x,y)) geom_smooth() "],["advanced-graphics.html", "Chapter 3 Advanced-graphics 3.1 地图", " Chapter 3 Advanced-graphics 3.1 地图 地图毫无疑问是展示地理信息数据时最直观的工具，尤其是当地图和统计量结合时，其功效则会进一步加强。在本书的第一章中曾经提到过John Snow的地图，注意图中不仅标示出了霍乱发生的地点，每个地点的死亡人数也用点的数目标示了出来。历史上还有不少类似的使用地图的例子，而在今天，地理信息系统(GIS)已经成为研究空间和地理数据的热门工具，地图的应用也是屡见不鲜。 地图的本质是多边形，而多边形的边界则由地理经纬度数据确定。R中的附加包 maps (Brownrigg，2010)是目前比较完善的地图程序包之一，因此本节主要介绍该程序包。 "],["plotly.html", "Chapter 4 Plotly 4.1 Overview 4.2 Plotly Pipeline 4.3 Plotly Foundations 4.4 Plotly Advanced", " Chapter 4 Plotly 4.1 Overview Plotly是一个非常强大的开源交互式可视化框架，它通过构建基于 HTML 的交互式图表来显示信息，可创建各种形式的精美图表。Plotly提供了Python，R，Matlab等多种语言API，因此我们可以很方便地在这些软件中调用Plotly，从而快速实现交互式的可视化绘图。 4.2 Plotly Pipeline 使用plotly-R包制作的图形是由JavaScript库plotly.js提供底层支持。plotly-R包中的核心函数是plot_ly()，它连接了R与js。我们首先来尝试使用plot_ly()探索ggplot2中的diamonds数据集，了解如何使用plotly工作。 4.2.1 visualization demo # load packages library(plotly) library(dplyr) library(htmlwidgets) library(htmltools) # load the diamonds dataset from the ggplot2 package data(diamonds, package = &quot;ggplot2&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows plot_ly(diamonds, x = ~cut) plot_ly(diamonds, x = ~cut, y = ~clarity) plot_ly(diamonds, x = ~cut, color = ~clarity, colors = &quot;Accent&quot;) 4.2.2 easy to add trace p &lt;- diamonds %&gt;% plot_ly(x = ~cut) %&gt;% add_histogram(name = &quot;hist&quot;) %&gt;% group_by(cut) %&gt;% summarise(n = n()) %&gt;% add_text( text = ~scales::comma(n), y = ~n, textposition = &quot;top middle&quot;, cliponaxis = FALSE, name = &quot;text&quot; ) %&gt;% ungroup() %&gt;% mutate(avg = mean(n)) %&gt;% add_lines(y = ~avg, opacity = 0.8, line =list(width=2), name = &quot;avg&quot; ) p 4.2.3 getting raw data p %&gt;% plotly_data() ## # A tibble: 5 × 3 ## cut n avg ## &lt;ord&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Fair 1610 10788 ## 2 Good 4906 10788 ## 3 Very Good 12082 10788 ## 4 Premium 13791 10788 ## 5 Ideal 21551 10788 4.2.4 publishing output saveWidget(p, &quot;p.html&quot;, selfcontained = F, libdir = &quot;lib&quot;) 4.3 Plotly Foundations 正如我们在第2节中所看到的，一个plotly图像由多条trace组成，每种trace对应一个画图类型，例如，点、线、文本和多边形，与R base plot 和 ggplot2类似。这些trace通过add_trace()或add_*()函数（add_markers(), add_lines(), add_paths(), add_segments(), add_ribbons(), add_area(), and add_polygons()等）来创建。 4.3.1 markers # load the mpg dataset from the ggplot2 package data(mpg, package = &quot;ggplot2&quot;) mpg ## # A tibble: 234 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… ## 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… ## 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… ## 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… ## # … with 224 more rows 4.3.1.1 Alpha plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(alpha = 0.3) 4.3.1.2 Colors discrete plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~factor(cyl)) continuous plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~cyl) %&gt;% colorbar() no mapping data values plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = I(&quot;black&quot;)) 4.3.1.3 Symbols plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(symbol = ~factor(cyl)) 4.3.1.4 Size plot_ly(mpg, x = ~cty, y = ~hwy, alpha = 0.3) %&gt;% add_markers(size = ~cyl) 4.3.2 Lines # load the txhousing dataset from the ggplot2 package data(txhousing, package = &quot;ggplot2&quot;) txhousing ## # A tibble: 8,602 × 9 ## city year month sales volume median listings inventory date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000 ## 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000. ## 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000. ## 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000. ## 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000. ## 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000. ## 7 Abilene 2000 7 152 12635000 73500 742 6.2 2000. ## 8 Abilene 2000 8 131 10710000 75000 765 6.4 2001. ## 9 Abilene 2000 9 104 7615000 64500 771 6.5 2001. ## 10 Abilene 2000 10 101 7040000 59300 764 6.6 2001. ## # … with 8,592 more rows 4.3.2.1 Linetypes top5 &lt;- txhousing %&gt;% group_by(city) %&gt;% summarise(avg = mean(sales, na.rm = TRUE)) %&gt;% arrange(desc(avg)) %&gt;% top_n(5) tx5 &lt;- semi_join(txhousing, top5, by = &quot;city&quot;) plot_ly(tx5, x = ~date, y = ~median) %&gt;% add_lines(linetype = ~city) 4.3.3 Bars &amp; histograms p1 &lt;- plot_ly(diamonds, x = ~price) %&gt;% add_histogram() p2 &lt;- plot_ly(diamonds, x = ~cut) %&gt;% add_histogram() subplot(p1, p2) %&gt;% hide_legend() Multiple numeric distributions one_plot &lt;- function(d) { plot_ly(d, x = ~price) %&gt;% add_histogram() %&gt;% add_annotations( ~unique(clarity), x = 0.5, y = 1, xref = &quot;paper&quot;, yref = &quot;paper&quot;, showarrow = FALSE ) } diamonds %&gt;% split(.$clarity) %&gt;% lapply(one_plot) %&gt;% subplot(nrows = 2, shareX = TRUE, titleX = FALSE) %&gt;% hide_legend() Multiple discrete distributions plot_ly(diamonds, x = ~cut, color = ~clarity) %&gt;% add_histogram() percent # number of diamonds by cut and clarity (n) cc &lt;- count(diamonds, cut, clarity) # number of diamonds by cut (nn) cc2 &lt;- left_join(cc, count(cc, cut, wt = n, name = &#39;nn&#39;)) cc2 %&gt;% mutate(prop = n / nn) %&gt;% plot_ly(x = ~cut, y = ~prop, color = ~clarity) %&gt;% add_bars() %&gt;% layout(barmode = &quot;stack&quot;) 4.3.4 Boxplots p &lt;- plot_ly(diamonds, y = ~price, color = I(&quot;black&quot;), alpha = 0.1, boxpoints = &quot;suspectedoutliers&quot;) p1 &lt;- p %&gt;% add_boxplot(x = &quot;Overall&quot;) p2 &lt;- p %&gt;% add_boxplot(x = ~cut) subplot( p1, p2, shareY = TRUE, widths = c(0.2, 0.8), margin = 0 ) %&gt;% hide_legend() d &lt;- diamonds %&gt;% mutate(cc = interaction(clarity, cut)) # interaction levels sorted by median price lvls &lt;- d %&gt;% group_by(cc) %&gt;% summarise(m = median(price)) %&gt;% arrange(m) %&gt;% pull(cc) plot_ly(d, x = ~price, y = ~factor(cc, lvls)) %&gt;% add_boxplot(color = ~clarity) %&gt;% layout(yaxis = list(title = &quot;&quot;)) 4.4 Plotly Advanced 4.4.1 ggplotly data(&quot;iris&quot;) one_ggplot &lt;- function(i = 1){ themr &lt;- ggthemr(palette[i], set_theme = FALSE) p &lt;- iris %&gt;% ggplot(aes(Sepal.Length, fill = Species)) + geom_histogram(binwidth = 0.2) + get_ggthemr_color(palette = palette[i], return_type = &quot;fill&quot;) + themr$theme return(p) } one_ggplot() one_ggplot() %&gt;% ggplotly() 4.4.2 layout title_font &lt;- list(color = &quot;white&quot;, size = 26, family = &quot;Microsoft YaHei&quot;) axis_font &lt;- list(color = &quot;white&quot;, size = 20, family = &quot;Microsoft YaHei&quot;) plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~factor(cyl)) %&gt;% layout( title = list( text = paste(&#39;markers-dark-theme&#39;), font = title_font ), showlegend = TRUE, legend = list(font = list(color = &#39;white&#39;)), yaxis = list( tickmode=&#39;array&#39;, autorange = TRUE, showgrid = FALSE, title = list(text = &#39;cty&#39;) , showline = TRUE, color = &#39;white&#39;, font = axis_font, nticks = 4 ), xaxis = list( showline = TRUE, title = list(text = &#39;hwy&#39;), color = &#39;white&#39;, font = axis_font ), paper_bgcolor = &quot;#000000&quot;, plot_bgcolor = &quot;#000000&quot;, margin = list( t = 90, b = 90, l = 90, r = 90 ) ) 4.4.3 Javascript plotly_hover, plotly_click, plotly_selected p &lt;- plot_ly(mtcars, x = ~wt, y = ~mpg) %&gt;% add_markers( text = rownames(mtcars), customdata = paste0(&quot;https://www.bing.com/search?q=&quot;, rownames(mtcars)) ) onRender( p, &quot; function(el) { el.on(&#39;plotly_click&#39;, function(d) { var url = d.points[0].customdata; window.open(url); }); } &quot;) "],["visualization-project.html", "Chapter 5 Visualization Project 5.1 Industry analysis", " Chapter 5 Visualization Project 5.1 Industry analysis 国家开发投资集团有限公司（简称“国投”）成立于1995年，是中央直接管理的国有重要骨干企业，是中央企业中唯一的投资控股公司，是首批国有资本投资公司改革试点单位。国投注册资本338亿元，截至2020年末，集团资产总额6823亿元，员工约5万人。2020年集团实现营业总收入1531亿元，利润总额221亿元，连续17年在国务院国资委经营业绩考核中荣获A级，连续五个任期获得业绩优秀企业。 国投成立以来，始终秉承资产经营与资本经营相结合的经营理念，坚持战略投资、价值投资，持续优化国有资本布局，提升产业竞争力，推动国有资本向关系国民经济命脉和国计民生的重要行业和关键领域集中，向战略性新兴产业集中，推动投资企业高质量发展，实现国有资本保值增值。 国投规划用三个五年的时间，建成具有全球竞争力的世界一流资本投资公司。到2025年集团创立30周年时，集团综合实力、核心竞争力和可持续发展能力大幅提升，在战略性新兴产业细分领域培育若干头部企业，产业结构和布局更加科学合理，进入世界500强，从国内一流走向国际一流。 项目核心任务：通过交互式统计图表 展现国投已有业务布局 挖掘潜在投资行业价值 为投资经营者提供参考 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
