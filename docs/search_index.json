[["index.html", "高级统计绘图 Chapter 1 Introduction", " 高级统计绘图 2021-12-24 🎄 Chapter 1 Introduction 🎅 Merry Christmas 大数据分析统计基础｜第七组｜Presentation &nbsp&nbsp&nbsp&nbsp Our Presentation Homepage 👇 &nbsp&nbsp&nbsp&nbsp 🏠 https://tuozhenliu.github.io/Advanced-Visualization &nbsp&nbsp&nbsp&nbsp 🛠 Powered by bookdown and github pages &nbsp&nbsp&nbsp&nbsp 📮 欢迎访问交流^^ &mdash; 刘拓臻, 郑恩昱, 戴玥琨 References 方匡南, 朱建平, 姜叶飞. R数据分析方法与案例详解[M]. 电子工业出版社, 2015. https://ggplot2-book.org https://plotly-r.com https://plotly.com/r/ https://echarts4r.john-coene.com/ https://github.com/jtr13/EDAVtemplate "],["ggplot2.html", "Chapter 2 ggplot2 2.1 散点图 2.2 条形图和箱线图 2.3 直方图和密度曲线图 2.4 时间序列图 2.5 图形标注", " Chapter 2 ggplot2 一般基础的画图R有自己的基础图形系统，例如graphics包，grid包等。或者lattice包。不过这里要介绍的ggplot2它是一个有着完整的一套图形语法所支持的软件包，其语法基于《Grammar of Graphics》（Wilkinson，2005）一书。该绘图包的特点在于并不去定义具体的图形（如直方图，散点图），而是定义各种底层组件（如线条、方块）来合成复杂的图形，这使它能以非常简洁的函数构建各类图形，而且默认条件下的绘图品质就能达到出版要求。 首先在ggplot2的语法中，有几个概念需要了解： 图层（Layer）：图层允许用户一步步的构建图形，方便单独对图层进行修改、增加、甚至改动数据。 标度（Scale）：标度是一种函数，它控制了数学空间到图形元素空间的映射。一组连续数据可以映射到X轴坐标，也可以映射到一组连续的渐变色彩。一组分类数据可以映射成为不同的形状，也可以映射成为不同的大小。 坐标系统（Coordinate）：坐标轴可以进行变换以满足不同的需要，除直角坐标外还有对数坐标、极坐标等。 位面（Facet）：很多时候需要将数据按某种方法分组，分别进行绘图。位面就是控制分组绘图的方法和排列形式。 2.1 散点图 一般对于一系列观测值的图形描述，可以用散点图来直观表达。这里基本的散点图绘制可以使用qplot()函数。下面我们用ggplot2包中关于50000颗钻石的数据集diamonds来进行说明。 library(ggplot2) qplot(carat, price, data = diamonds) 上图表示了钻石价格和重量的关系的散点图，因为有50000个数据，很多点都会重合在一起。在此基础上，可以添加对用颜色对钻石颜色和用不同的形状切工的信息进行区分： qplot(carat, price, data = diamonds, colour = color) qplot(carat, price, data = diamonds, shape = cut) 当然还可以通过透明度的修改，来对重叠的部分进行一些区分。在qplot()中只需添加选项alpha=I(1/n)，其中n代表了该点经过多少次重合后会变得不再透明： qplot(carat, price, data = diamonds, alpha = I(1 / 50)) 对于密集散点，使用这种方法，就可以很容易的看出大部分点在哪里重叠，这种方式在散点图上点比较多的时候分辨重叠的点的时候有很好的帮助。 或者使用ggplot()函数中的二维直方图来表现： p &lt;- ggplot(diamonds, aes(carat, price)) p + stat_bin2d(bins = 100) 上图中，颜色的深浅代表了该部分大约有多少点重合。里面的bins选项值的大小决定了分块区域的大小。 除此之外，如果还需要对上述钻石数据按照颜色(color)或者切工(cut)在散点图如上加以区分的话，则需要用到ggplot()函数： p &lt;- ggplot(diamonds, aes(carat, price)) p + geom_point(aes(colour = cut, shape = cut, size = depth), alpha = 0.6, position = &quot;jitter&quot;) + scale_size_area(max_size = 2) 为了展示数据的趋势，一般需要在散点图上面添加一条平滑的曲线。这里可以通过添加smooth对象传递给geom参数，它会将这些图按照顺序进行重叠： qplot(carat, price, data = diamonds, geom = c(&quot;point&quot;, &quot;smooth&quot;)) 另外还可以使用更全面的ggplot()函数加上geom_point()、geom_smooth()来实现上面的结果并作出更多诠释。例如想要在上面平滑的基础上分别对不同切工进行平滑并用颜色加以区分： p &lt;- ggplot(diamonds, aes(carat, price, colour = cut)) p + geom_point(alpha = 0.1) + geom_smooth() 2.2 条形图和箱线图 对于离散型变量，频数一般可以使用条形图来绘制，并且不需要像基础图形下面使用barchart先对数据进行汇总。这里直接使用geom=“bar”即可，并且如果需要对数据分组，可以使用wight来表达： qplot(color, data = diamonds, geom = &quot;bar&quot;) qplot(color, data = diamonds, geom = &quot;bar&quot;, weight = carat) + scale_y_continuous(&quot;carat&quot;) 此外，还可以对条形图分组并绘制不同类型的条形图。一般调整的参数有stack、dodge、fill、identity，stack方式是将不同年份数据堆叠放置；dodge方式是将不同年份的数据并列放置；fill方式和stack类似，但Y轴不再是计数，而是以百分比显示；identity方式是不做任何改变直接显示出来，所以需要设置透明度才能看得清楚,默认是stack： p &lt;- ggplot(data = diamonds, aes(x = color, fill = factor(cut))) p + geom_bar(position = &quot;stack&quot;) p + geom_bar(position = &quot;dodge&quot;) p + geom_bar(position = &quot;fill&quot;) p + geom_bar(position = &quot;identity&quot;, alpha = 0.3) 如果需要使用箱线图来描述连续变量在不同类别下面的变化情况可以使用箱线图来描述，参数为：geom=“boxplot”。例如研究不同颜色下每克拉钻石价格的分布情况: qplot(color, price / carat, data = diamonds, geom = &quot;boxplot&quot;) 又或者，使用ggplot()函数来进行绘制，还可以变成小提琴样式的箱线图。其中geom_violin()绘制小提琴图，geom_jitter()绘制扰动点图： p &lt;- ggplot(diamonds, aes(color, price / carat, fill = color)) p + geom_boxplot() p + geom_violin(alpha = 0.8, width = 0.9) + geom_jitter(shape = 21, alpha = 0.03) 2.3 直方图和密度曲线图 一般对于连续性数据我们会只用直方图或者密度曲线图来绘制。这里只需在qplot()上面添加参数geom=“histogram”和geom=“density”。来进行实现。其中，直方图的组距使用binwidth参数来进行调整，密度曲线的平滑程度则使用adjust参数来进行设定： qplot(carat, data = diamonds, geom = &quot;histogram&quot;, binwidth = 1) qplot(carat, data = diamonds, geom = &quot;histogram&quot;, binwidth = 0.1) qplot(carat, data = diamonds, geom = &quot;histogram&quot;, binwidth = 0.01) 此外，还可以使用fill或colour参数指定分类的变量从而实现在同一图上使用不同颜色来标识不用种类的信息： qplot(carat, data = diamonds, geom = &quot;histogram&quot;, fill = cut) qplot(carat, data = diamonds, geom = &quot;density&quot;, colour = cut) 对于直方图和密度曲线图，还可以用ggplot()函数来绘制。也可以把上面两这个图合并在一起，以及加上更为复杂的参数： p &lt;- ggplot(diamonds, aes(carat)) p + geom_histogram(position = &quot;identity&quot;, alpha = 0.3, aes(y = ..density.., fill = cut), color = &quot;white&quot;) + stat_density(geom = &quot;line&quot;, position = &quot;identity&quot;, aes(colour = cut)) 2.4 时间序列图 对于时间序列数据绘图，其实就是绘制线条图，只需要添加参数geom=“line”即可。例如使用economics数据集绘制一个关于失业率的时间序列图： qplot(date, uempmed, data = economics, geom = &quot;line&quot;) 2.5 图形标注 在绘图步骤完成之后，一般还需要加上额外的文字和图形来标注。例如对于前面的失业率时间序列上加上每任美国总统就职的时间点： (unemp &lt;- qplot(date, uempmed, data = economics, geom = &quot;line&quot;)) presidential &lt;- presidential[-(1:3), ] unemp + geom_vline(aes(xintercept = as.numeric(start)), data = presidential) 或者这种标识比较单调，我们也可以用对不同总统任期的区域背景着色来进行区分： library(scales) xr &lt;- range(economics$date) yr &lt;- range(economics$uempmed) unemp + geom_rect(aes(NULL, NULL, xmin = start, xmax = end, fill = name), ymin = yr[1], ymax = yr[2], data = presidential, alpha = 0.2) 常用的基础绘图函数和ggplot2中图层的对照如下： 基础绘图函数 ggplot2中的图层 curve() geom_curve() hline() geom_hline() lines() geom_line() points() geom_point() polygon() geom_polygon() rect() geom_rect() rug() geom_rug() segments() geom_segment() text() geom_text() vline() geom_vline() abline(lm(y~x)) geom_smooth(method=“lm”) lines(density(x)) geom_density() lines(loess(x,y)) geom_smooth() "],["other-advanced-plots.html", "Chapter 3 Other Advanced Plots 3.1 三维图形 3.2 词云 3.3 散点图矩阵与关系矩阵图 3.4 马赛克图", " Chapter 3 Other Advanced Plots 3.1 三维图形 R中一般使用persp()函数来绘制三维图形。 x &lt;- seq(-10, 10, length= 30) y &lt;- x f &lt;- function(x, y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r } z &lt;- outer(x, y, f) z[is.na(z)] &lt;- 1 op &lt;- par(bg = &quot;white&quot;) persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = &quot;lightblue&quot;) R中还提供了专门的scatterplot3d包来绘制三维图形。 library(scatterplot3d) data(iris) scatterplot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width) 3.2 词云 在目前流行的文本挖掘中，词云(world cloud)是一个常用的对文本词汇频次进行表现的形式。一般通过文字字号的大小来表示词频的多少，还可以使用不同颜色加以区分。 library(wordcloud) library(tm) data(crude) crude &lt;- tm_map(crude, removePunctuation) crude &lt;- tm_map(crude, function(x)removeWords(x,stopwords())) tdm &lt;- TermDocumentMatrix(crude) m &lt;- as.matrix(tdm) v &lt;- sort(rowSums(m),decreasing=TRUE) d &lt;- data.frame(word = names(v),freq=v) wordcloud(d$word,d$freq,random.order=FALSE, colors=brewer.pal(8, &quot;Dark2&quot;)) 3.3 散点图矩阵与关系矩阵图 散点图矩阵是将多个散点图合并在一起的表现形式，由n个变量构成n×n的矩阵。R中有pairs()函数可以绘制。 pairs(mtcars) R中还有一个corrplot的包可以更直观和美观的展示这种相关关系。 library(corrplot) corrplot(cor(mtcars), tl.pos = &quot;d&quot;, cl.pos = &quot;n&quot;) 我们还可以在函数中加上按照相关系数大小排序以及对正负相关变量进行区分，让图形变得更美观易读。 corrplot(cor(mtcars), order = &quot;h&quot;, tl.pos = &quot;d&quot;, cl.pos = &quot;n&quot;, addrect = 2) 3.4 马赛克图 R中马赛克图的函数为mosaicplot()，这里使用的示例数据是泰坦尼克号乘客生存情况数据： ftable(Titanic) ## Survived No Yes ## Class Sex Age ## 1st Male Child 0 5 ## Adult 118 57 ## Female Child 0 1 ## Adult 4 140 ## 2nd Male Child 0 11 ## Adult 154 14 ## Female Child 0 13 ## Adult 13 80 ## 3rd Male Child 35 13 ## Adult 387 75 ## Female Child 17 14 ## Adult 89 76 ## Crew Male Child 0 0 ## Adult 670 192 ## Female Child 0 0 ## Adult 3 20 我们所关心的问题主要是通过一些比例看出当时救援的侧重性，如：是否头等舱的乘客生还比例最高？“女士和孩子优先”的原则在各船舱有没有被很好遵守？ library(stats) library(graphics) mosaicplot(Titanic, main = &quot;Survival on the Titanic&quot;, color = TRUE) 感兴趣的读者还可以使用stats包中的loglin()函数拟合对数线性模型、从统计模型的角度继续分析。 "],["maps.html", "Chapter 4 Maps 4.1 maps包 4.2 REmap包", " Chapter 4 Maps 地图毫无疑问是展示地理信息数据时最直观的工具，尤其是当地图和统计量结合时，其功效则会进一步加强。地理信息系统(GIS)已经成为研究空间和地理数据的热门工具，地图的应用也是屡见不鲜。地图的本质是多边形，而多边形的边界则由地理经纬度数据确定。 4.1 maps包 R中的附加包 maps 是目前比较完善的地图程序包之一，maps包中核心的函数为map()，该函数的两个主要参数为地图数据库database和地图区域region，地图数据库中包含了所有区域的经纬度数据以及相应的区域名称，在指定一个数据库和一系列区域名称之后，这些区域的地图便可由map()生成。 library(maps) usage(map, w = 0.8) map( database = &quot;world&quot;, regions = &quot;.&quot;, exact = FALSE, boundary = TRUE, interior = TRUE, projection = &quot;&quot;, parameters = NULL, orientation = NULL, fill = FALSE, col = 1, plot = TRUE, add = FALSE, namesonly = FALSE, xlim = NULL, ylim = NULL, wrap = FALSE, resolution = if (plot) 1 else 0, type = &quot;l&quot;, bg = par(&quot;bg&quot;), mar = c(4.1, 4.1, par(&quot;mar&quot;)[3], 0.1), border = 0.01, ... ) 4.1.1 世界地图 通过运行如下代码得到世界地图。maps包里面还包括了美国、新西兰、意大利等国的地图。 library(maps) par(family = &quot;STKaiti&quot;) map(&quot;world&quot;, fill = TRUE, col = topo.colors(10), ylim = c(-60, 90), mar = c(0, 0, 0, 0)) title(&quot;世界地图&quot;) # 添加标题 4.1.2 美国地图 map(&quot;state&quot;, fill = TRUE, col = heat.colors(10), mar = c(0, 0, 2, 0) ) par(family = &quot;STKaiti&quot;) title(&quot;美国地图&quot;) 可以根据需要绘制某国地图或者美国某几个州的地图，只需在map()函数中添加选项例如region = c('new york', 'new jersey', 'penn') 即可。 map(&quot;state&quot;, region = c(&quot;new york&quot;, &quot;new jersey&quot;, &quot;penn&quot;), fill = TRUE, col = terrain.colors(3), mar = c(2, 3, 4, 3) ) par(family = &quot;STKaiti&quot;) title(&quot;美国三州地图&quot;) 4.1.3 中国地图 在国家基础地理信息中心的网站上提供了免费的GIS数据下载，里面包括了国界与省界数据，使用R的maptools包的readShapePoly()或rgdal包的readOGR()可以读取shp文件。 library(maptools) library(rgdal) china &lt;- readOGR(&quot;china/bou2_4p.shp&quot;) china@data$NAME &lt;- iconv(china@data$NAME, &quot;GBK&quot;, &quot;UTF-8&quot;) 该数据包含了中国925个地区的的面积、周长、编号、行政区名称等信息。 str(china@data) ## &#39;data.frame&#39;: 925 obs. of 7 variables: ## $ AREA : num 54.4 129.1 175.6 21.3 15.6 ... ## $ PERIMETER : num 68.5 129.9 84.9 41.2 38.4 ... ## $ BOU2_4M_ : chr &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; ... ## $ BOU2_4M_ID: chr &quot;23&quot; &quot;15&quot; &quot;65&quot; &quot;22&quot; ... ## $ ADCODE93 : int 230000 150000 650000 220000 210000 620000 130000 110000 210000 210000 ... ## $ ADCODE99 : int 230000 150000 650000 220000 210000 620000 130000 110000 210000 210000 ... ## $ NAME : chr &quot;黑龙江省&quot; &quot;内蒙古自治区&quot; &quot;新疆维吾尔自治区&quot; &quot;吉林省&quot; ... 在绘制地图时，每一个省市自治区或岛屿都是用一个多边形来表示的。GIS数据提供了每一个行政区的多边形逐点的坐标，然后R通过顺次连接这些坐标，就绘制出了一个多边形区域。 plot(china) par(family = &quot;STKaiti&quot;) title(&quot;中国地图&quot;) plot命令中的col参数在本例中应该是一个长度为 925 的向量，其第 i 个分量的取值就代表了地图中第 i 个多边形的颜色。 plot(china, col = gray(924:0 / 924)) 也可以通过查找相应的行政区对应的行名对col参数进行赋值，对相应地区进行着色： getColor &lt;- function(mapdata, provname, provcol, othercol) { f &lt;- function(x, y) ifelse(x %in% y, which(y == x), 0) colIndex &lt;- sapply(mapdata@data$NAME, f, provname) col &lt;- c(othercol, provcol)[colIndex + 1] return(col) } 其中mapdata是存放地图数据的变量，provname是需要改变颜色的地区的名称，provcol是对应于provname的代表颜色的向量，othercol是其它地区的颜色。举例如下： provname &lt;- c(&quot;北京市&quot;, &quot;上海市&quot;, &quot;重庆市&quot;, &quot;福建省&quot;) provcol &lt;- c(&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;purple&quot;) plot(china, col = getColor(china, provname, provcol, &quot;white&quot;)) 利用类似的方法就可以根据自己的需要对不同的区域进行着色。从国家统计局获取我国各地区的人口数据，然后根据人口的多少对各省份进行着色。 data_population &lt;- read.csv(&quot;data/population.csv&quot;) head(data_population[,2:3]) ## provname pop ## 1 北京市 1633 ## 2 天津市 1115 ## 3 河北省 6943 ## 4 山西省 3393 ## 5 内蒙古自治区 2405 ## 6 辽宁省 4298 provname &lt;- data_population$provname pop &lt;- data_population$pop provcol &lt;- rgb(red = 1 - pop / max(pop) / 2, green = 1 - pop / max(pop) / 2, blue = 0) plot(china, col = getColor(china, provname, provcol, &quot;white&quot;), xlab = &quot;&quot;, ylab = &quot;&quot;) 此外，还可以利用这个参数画出国内某一部分的地图，例如绘制福建、浙江、江西和广东四个东南地区省份的地图如下： southeast &lt;- c(&quot;福建省&quot;, &quot;浙江省&quot;, &quot;江西省&quot;, &quot;广东省&quot;) plot(china, col = getColor(china, southeast, rep(&quot;blue&quot;, 4), &quot;white&quot;), border = &quot;white&quot;, xlab = &quot;&quot;, ylab = &quot;&quot; ) 还可以人工将各省会的信息在地图上标记出来 par(mar = rep(0, 4)) par(family = &quot;STKaiti&quot;) dat &lt;- read.csv(&quot;data/city.csv&quot;) plot(china, col = &quot;lightgray&quot;, ylim = c(18, 54), panel.first = grid()) points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5), cex = 0.6) text(dat$jd, dat$wd, dat[, 2], cex = 0.7, col = rgb(0, 0, 0, 0.7), pos = c( 2, 4, 4, 4, 3, 4, 2, 3, 4, 2, 4, 2, 2, 4, 3, 2, 1, 3, 1, 1, 2, 3, 2, 2, 1, 2, 4, 3, 1, 2, 2, 4, 4, 2 ) ) axis(1, lwd = 0) axis(2, lwd = 0) axis(3, lwd = 0) axis(4, lwd = 0) 4.2 REmap包 REmap是一个基于Echarts的R语言程序包，为使用者提供了一个简便的、可交互的地图数据可视化工具。由于REmap目前托管在GitHub上,需要使用devtools包下载。 install.packages(&#39;devtools&#39;) library(devtools) install_github(&#39;lchiffon/REmap&#39;) 4.2.1 获取经纬度信息 REmap是基于百度地图构建的，因此需要在百度地图开放平台创建项目获取AK，配置到REmap中。 library(REmap) options(remap.ak = &quot;ZAIIlGEpPKoBVF5M4GLEuN6G5T6AQpCn&quot;) # 配置百度地图API place &lt;- c(&quot;中央财经大学学院南路校区&quot;, &quot;中央财经大学沙河校区&quot;) get_geo_position(place) ## lon lat city ## 1 116.3492 39.96521 中央财经大学学院南路校区 ## 2 116.2883 40.17780 中央财经大学沙河校区 4.2.2 获取各省（市）的市（区）级行政单位名称 问：北京市究竟下辖哪几个区呢？ mapNames(&quot;北京&quot;) ## [1] &quot;密云县&quot; &quot;怀柔区&quot; &quot;房山区&quot; &quot;延庆县&quot; &quot;门头沟区&quot; &quot;昌平区&quot; ## [7] &quot;大兴区&quot; &quot;顺义区&quot; &quot;平谷区&quot; &quot;通州区&quot; &quot;朝阳区&quot; &quot;海淀区&quot; ## [13] &quot;丰台区&quot; &quot;石景山区&quot; &quot;西城区&quot; &quot;东城区&quot; &quot;宣武区&quot; &quot;崇文区&quot; 4.2.3 地图可视化 4.2.3.1 remap函数绘制航迹图 origin &lt;- rep(&quot;北京&quot;, 10) destination &lt;- c( &quot;上海&quot;, &quot;广州&quot;, &quot;大连&quot;, &quot;南宁&quot;, &quot;南昌&quot;, &quot;拉萨&quot;, &quot;长春&quot;, &quot;包头&quot;, &quot;重庆&quot;, &quot;常州&quot; ) flight &lt;- data.frame(origin, destination) remap(flight, title = &quot;航迹图&quot;, theme = get_theme(&quot;Dark&quot;)) 图中的颜色可以通过get_theme()来设置，几个常用的参数： Theme:theme是总体配色选项，共有’Dark’,‘Bright’,‘Sky’,‘None’四种选项。选定该选项（除’None’外）后，其它参数无需再设置。 lineColor: lineColor为线条颜色，默认是随机，也可自行设置，如’red’。 BackgroundColor:地图外背景颜色 RegionColor:地图中各区域颜色 get_theme( theme = &quot;Dark&quot;, lineColor = &quot;Random&quot;, backgroundColor = &quot;#1b1b1b&quot;, titleColor = &quot;#fff&quot;, borderColor = &quot;rgba(100,149,237,1)&quot;, regionColor = &quot;#1b1b1b&quot;, labelShow = T, pointShow = F, pointColor = &quot;gold&quot; ) 例如将颜色改为亮色： remap(flight, title = &quot;亮色航迹图&quot;, theme = get_theme(&quot;Bright&quot;)) 4.2.3.2 remapH绘制热力效果图 这个函数的特点是可以做中心辐射的热力图，这种热力图在气象、人口密度、海拔测绘领域有诸多运用，当然也可以用在商务场合——特别是跟地理信息有关的数据呈现方面。 remapH()的各参数如下： remapH(data, maptype = &#39;china&#39;, theme = get_theme(&quot;Dark&quot;), blurSize = 30, color = c(&#39;blue&#39;), minAlpha = 0.05, opacity = 1, ) data为要传入的数据，数据为三列，第一列为lon(经度)，第二列为lat(维度)，第三列为prob(密度/概率) maptype为要绘制的地图类型，可选有：“china”，“world”或中国各省份名字 theme为绘制的地图主题类型，可由get_theme函数传入，get_theme在下面会详解 blurSize为热力效果的泛化范围，可调整热力点中心的扩散程度 color为热力的渐变颜色 minAlpha为热力点的展示阈值，对应data中的prob列，作图时各点密度会对比minAlpha，以凸显不同密度所展示的不同热力分布 opacity为透明度，调整热力图的透明度 获取200个城市的PM2.5指数及经纬度，绘制热力图如下： air &lt;- read.csv(file = &quot;data/air.csv&quot;, header = T) head(air) ## lon lat avg_pm2_5 ## 1 121.3857 41.05955 0.3618444 ## 2 113.4990 22.28592 0.1763897 ## 3 119.9574 36.78975 0.3056141 ## 4 114.9962 30.20217 0.3327429 ## 5 117.5387 36.70130 0.4373493 ## 6 129.0924 47.97323 0.1041234 theme1 &lt;- get_theme( theme = &quot;none&quot;, lineColor = &quot;white&quot;, backgroundColor = &quot;white&quot;, titleColor = &quot;#fff&quot;, borderColor = &quot;blue&quot;, regionColor = &quot;grey&quot;, labelShow = T, pointShow = F, pointColor = &quot;gold&quot; ) remapH(air, maptype = &quot;china&quot;, theme = theme1, blurSize = 35, color = &quot;red&quot;, minAlpha = 0.3, opacity = 1, ) 4.2.3.3 remapC绘制填充地图 remapC()允许我们同时在一张地图上制作填充图和点图、线图。 remapC(data, maptype = &quot;china&quot;, markLineData = NULL, markPointData = NULL, color = c(&quot;#1e90ff&quot;, &quot;#f0ffff&quot;), theme = get_theme(&quot;Bright&quot;), title = &quot;&quot;, subtitle = &quot;&quot;, markLineTheme = markLineControl(), markPointTheme = markPointControl(), geoData = NA, mindata = NA, maxdata = NA ) 主要参数： data为需要的原始数据框格式数据，共2列，第一列为省份或者城市名称，第二列为对应的数值，数值大小将决定地图颜色深浅。 maptype为地图类型设置，可选world、china或者中国省份名称 color为热力图渐变颜色，默认为2个颜色，第一个为终止色，第二个为初始色 mindata与maxdata可以设置颜色极端点对应数据的上下限（默认是使用data中的数据最大值最小值作为两端极值）。 province &lt;- mapNames(&quot;china&quot;) # 全国省份 value &lt;- rnorm(34, 100, 30) # 随机生成分省值 mydata &lt;- data.frame(province, value) # 合成数据框作图数据 remapC(mydata, maptype = &quot;China&quot;, color = c(&quot;yellow&quot;, &quot;red&quot;), title = &quot;全国分省图&quot; ) # 制作等级图 模拟出广东省回流各省的人口数，使用填色地图表示人流规模，使用动态流向线表示回流最大的前10个省份。 province &lt;- mapNames(&quot;china&quot;) # 全国省份 value &lt;- round(rnorm(34, 1000, 30), 0) # 随机生成分省值 mydata &lt;- data.frame(province, value) # 合并数据 lableper &lt;- mydata[order(mydata[, &quot;value&quot;], decreasing = T), ][1:10, ] origin &lt;- rep(&quot;广州&quot;, length(lableper)) destination &lt;- lableper$province line_data &lt;- data.frame(origin, destination) remapC(mydata, title = &quot;广东省人口迁徙地图&quot;, theme = get_theme(&quot;Dark&quot;), color = c(&quot;#CD0000&quot;, &quot;#FFEC8B&quot;), markLineData = line_data, markLineTheme = markLineControl(color = &quot;white&quot;, lineWidth = 2, lineType = &quot;dashed&quot;), markPointData = line_data[2], markPointTheme = markPointControl( symbolSize = 13, effect = T, effectType = &quot;scale&quot;, color = &quot;white&quot; ) "],["plotly.html", "Chapter 5 Plotly 5.1 Plotly简介 5.2 Plotly工作流 5.3 Plotly基础 5.4 Plotly进阶", " Chapter 5 Plotly 5.1 Plotly简介 Plotly是一个非常强大的开源交互式可视化框架，它通过构建基于 HTML 的交互式图表来显示信息，可创建各种形式的精美图表。Plotly提供了Python，R，Matlab等多种语言API，因此我们可以很方便地在这些软件中调用Plotly，从而快速实现交互式的可视化绘图。 5.2 Plotly工作流 使用plotly-R包制作的图形是由JavaScript库plotly.js提供底层支持。plotly-R包中的核心函数是plot_ly()，它连接了R与js。我们首先来尝试使用plot_ly()探索ggplot2中的diamonds数据集，了解如何使用plotly工作。 5.2.1 构建plotly对象 # load packages library(plotly) library(dplyr) library(htmlwidgets) library(htmltools) # load the diamonds dataset from the ggplot2 package data(diamonds, package = &quot;ggplot2&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows plot_ly(diamonds, x = ~cut) plot_ly(diamonds, x = ~cut, y = ~clarity) plot_ly(diamonds, x = ~cut, color = ~clarity, colors = &quot;Accent&quot;) 5.2.2 添加trace p &lt;- diamonds %&gt;% plot_ly(x = ~cut) %&gt;% add_histogram(name = &quot;hist&quot;) %&gt;% group_by(cut) %&gt;% summarise(n = n()) %&gt;% add_text( text = ~scales::comma(n), y = ~n, textposition = &quot;top middle&quot;, cliponaxis = FALSE, name = &quot;text&quot; ) %&gt;% ungroup() %&gt;% mutate(avg = mean(n)) %&gt;% add_lines(y = ~avg, opacity = 0.8, line =list(width=2), name = &quot;avg&quot; ) p 5.2.3 获取源数据 p %&gt;% plotly_data() ## # A tibble: 5 × 3 ## cut n avg ## &lt;ord&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Fair 1610 10788 ## 2 Good 4906 10788 ## 3 Very Good 12082 10788 ## 4 Premium 13791 10788 ## 5 Ideal 21551 10788 5.2.4 发布可视化作品 saveWidget(p, &quot;p.html&quot;, selfcontained = F, libdir = &quot;lib&quot;) 5.3 Plotly基础 正如我们在第2节中所看到的，一个plotly图像由多条trace组成，每种trace对应一个画图类型，例如，点、线、文本和多边形，与R base plot 和 ggplot2类似。这些trace通过add_trace()或add_*()函数（add_markers(), add_lines(), add_paths(), add_segments(), add_ribbons(), add_area(), and add_polygons()等）来创建。 5.3.1 markers # load the mpg dataset from the ggplot2 package data(mpg, package = &quot;ggplot2&quot;) mpg ## # A tibble: 234 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… ## 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… ## 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… ## 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… ## # … with 224 more rows 5.3.1.1 Alpha plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(alpha = 0.3) 5.3.1.2 Colors discrete plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~factor(cyl)) continuous plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~cyl) %&gt;% colorbar() no mapping data values plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = I(&quot;black&quot;)) 5.3.1.3 Symbols plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(symbol = ~factor(cyl)) 5.3.1.4 Size plot_ly(mpg, x = ~cty, y = ~hwy, alpha = 0.3) %&gt;% add_markers(size = ~cyl) 5.3.2 Lines # load the txhousing dataset from the ggplot2 package data(txhousing, package = &quot;ggplot2&quot;) txhousing ## # A tibble: 8,602 × 9 ## city year month sales volume median listings inventory date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abilene 2000 1 72 5380000 71400 701 6.3 2000 ## 2 Abilene 2000 2 98 6505000 58700 746 6.6 2000. ## 3 Abilene 2000 3 130 9285000 58100 784 6.8 2000. ## 4 Abilene 2000 4 98 9730000 68600 785 6.9 2000. ## 5 Abilene 2000 5 141 10590000 67300 794 6.8 2000. ## 6 Abilene 2000 6 156 13910000 66900 780 6.6 2000. ## 7 Abilene 2000 7 152 12635000 73500 742 6.2 2000. ## 8 Abilene 2000 8 131 10710000 75000 765 6.4 2001. ## 9 Abilene 2000 9 104 7615000 64500 771 6.5 2001. ## 10 Abilene 2000 10 101 7040000 59300 764 6.6 2001. ## # … with 8,592 more rows 5.3.2.1 Linetypes top5 &lt;- txhousing %&gt;% group_by(city) %&gt;% summarise(avg = mean(sales, na.rm = TRUE)) %&gt;% arrange(desc(avg)) %&gt;% top_n(5) tx5 &lt;- semi_join(txhousing, top5, by = &quot;city&quot;) plot_ly(tx5, x = ~date, y = ~median) %&gt;% add_lines(linetype = ~city) 5.3.3 Bars &amp; histograms p1 &lt;- plot_ly(diamonds, x = ~price) %&gt;% add_histogram() p2 &lt;- plot_ly(diamonds, x = ~cut) %&gt;% add_histogram() subplot(p1, p2) %&gt;% hide_legend() Multiple numeric distributions one_plot &lt;- function(d) { plot_ly(d, x = ~price) %&gt;% add_histogram() %&gt;% add_annotations( ~unique(clarity), x = 0.5, y = 1, xref = &quot;paper&quot;, yref = &quot;paper&quot;, showarrow = FALSE ) } diamonds %&gt;% split(.$clarity) %&gt;% lapply(one_plot) %&gt;% subplot(nrows = 2, shareX = TRUE, titleX = FALSE) %&gt;% hide_legend() Multiple discrete distributions plot_ly(diamonds, x = ~cut, color = ~clarity) %&gt;% add_histogram() percent # number of diamonds by cut and clarity (n) cc &lt;- count(diamonds, cut, clarity) # number of diamonds by cut (nn) cc2 &lt;- left_join(cc, count(cc, cut, wt = n, name = &#39;nn&#39;)) cc2 %&gt;% mutate(prop = n / nn) %&gt;% plot_ly(x = ~cut, y = ~prop, color = ~clarity) %&gt;% add_bars() %&gt;% layout(barmode = &quot;stack&quot;) 5.3.4 Boxplots p &lt;- plot_ly(diamonds, y = ~price, color = I(&quot;black&quot;), alpha = 0.1, boxpoints = &quot;suspectedoutliers&quot;) p1 &lt;- p %&gt;% add_boxplot(x = &quot;Overall&quot;) p2 &lt;- p %&gt;% add_boxplot(x = ~cut) subplot( p1, p2, shareY = TRUE, widths = c(0.2, 0.8), margin = 0 ) %&gt;% hide_legend() d &lt;- diamonds %&gt;% mutate(cc = interaction(clarity, cut)) # interaction levels sorted by median price lvls &lt;- d %&gt;% group_by(cc) %&gt;% summarise(m = median(price)) %&gt;% arrange(m) %&gt;% pull(cc) plot_ly(d, x = ~price, y = ~factor(cc, lvls)) %&gt;% add_boxplot(color = ~clarity) %&gt;% layout(yaxis = list(title = &quot;&quot;)) 5.4 Plotly进阶 5.4.1 ggplotly data(&quot;iris&quot;) one_ggplot &lt;- function(i = 1){ themr &lt;- ggthemr(palette[i], set_theme = FALSE) p &lt;- iris %&gt;% ggplot(aes(Sepal.Length, fill = Species)) + geom_histogram(binwidth = 0.2) + get_ggthemr_color(palette = palette[i], return_type = &quot;fill&quot;) + themr$theme return(p) } one_ggplot() one_ggplot() %&gt;% ggplotly() 5.4.2 layout title_font &lt;- list(color = &quot;white&quot;, size = 26, family = &quot;Microsoft YaHei&quot;) axis_font &lt;- list(color = &quot;white&quot;, size = 20, family = &quot;Microsoft YaHei&quot;) plot_ly(mpg, x = ~cty, y = ~hwy) %&gt;% add_markers(color = ~factor(cyl)) %&gt;% layout( title = list( text = paste(&#39;markers-dark-theme&#39;), font = title_font ), showlegend = TRUE, legend = list(font = list(color = &#39;white&#39;)), yaxis = list( tickmode=&#39;array&#39;, autorange = TRUE, showgrid = FALSE, title = list(text = &#39;cty&#39;) , showline = TRUE, color = &#39;white&#39;, font = axis_font, nticks = 4 ), xaxis = list( showline = TRUE, title = list(text = &#39;hwy&#39;), color = &#39;white&#39;, font = axis_font ), paper_bgcolor = &quot;#000000&quot;, plot_bgcolor = &quot;#000000&quot;, margin = list( t = 90, b = 90, l = 90, r = 90 ) ) 5.4.3 Javascript plotly_hover, plotly_click, plotly_selected example 1 p &lt;- plot_ly(mtcars, x = ~wt, y = ~mpg) %&gt;% add_markers( text = rownames(mtcars), customdata = paste0(&quot;https://www.bing.com/search?q=&quot;, rownames(mtcars)) ) onRender( p, &quot; function(el) { el.on(&#39;plotly_click&#39;, function(d) { var url = d.points[0].customdata; window.open(url); }); } &quot;) Click 👆 example 2 nms &lt;- names(mtcars) p &lt;- plot_ly(colors = &quot;RdBu&quot;) %&gt;% add_heatmap( x = nms, y = nms, z = ~round(cor(mtcars), 3) ) %&gt;% onRender(&quot; function(el) { Plotly.d3.json(&#39;mtcars.json&#39;, function(mtcars) { el.on(&#39;plotly_click&#39;, function(d) { var x = d.points[0].x; var y = d.points[0].y; var trace = { x: mtcars[x], y: mtcars[y], mode: &#39;markers&#39; }; Plotly.newPlot(&#39;filtered-plot&#39;, [trace]); }); }); } &quot;) # In a temporary directory, save the mtcars dataset as json and # the html to an test.html file, then open via a web server withr::with_path(tempdir(), { jsonlite::write_json(as.list(mtcars), &quot;mtcars.json&quot;) html &lt;- tagList(p, tags$div(id = &#39;filtered-plot&#39;)) save_html(html, &quot;mtcars.html&quot;) # if (interactive()) servr::httd() }) Click 👇 "],["visualization-project.html", "Chapter 6 Visualization Project 6.1 Industry analysis", " Chapter 6 Visualization Project 6.1 Industry analysis 国家开发投资集团有限公司（简称“国投”）成立于1995年，是中央直接管理的国有重要骨干企业，是中央企业中唯一的投资控股公司，是首批国有资本投资公司改革试点单位。国投注册资本338亿元，截至2020年末，集团资产总额6823亿元，员工约5万人。2020年集团实现营业总收入1531亿元，利润总额221亿元，连续17年在国务院国资委经营业绩考核中荣获A级，连续五个任期获得业绩优秀企业。 国投成立以来，始终秉承资产经营与资本经营相结合的经营理念，坚持战略投资、价值投资，持续优化国有资本布局，提升产业竞争力，推动国有资本向关系国民经济命脉和国计民生的重要行业和关键领域集中，向战略性新兴产业集中，推动投资企业高质量发展，实现国有资本保值增值。 国投规划用三个五年的时间，建成具有全球竞争力的世界一流资本投资公司。到2025年集团创立30周年时，集团综合实力、核心竞争力和可持续发展能力大幅提升，在战略性新兴产业细分领域培育若干头部企业，产业结构和布局更加科学合理，进入世界500强，从国内一流走向国际一流。 项目核心任务：通过交互式统计图表 展现国投已有业务布局 挖掘潜在投资行业价值 为投资经营者提供参考 点击跳转 👇 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
